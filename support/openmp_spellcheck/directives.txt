#pragma omp flush
#pragma omp task
#pragma omp parallel reduction(+:cores)
#pragma omp parallel for reduction(+: sum) if(minVectorSize > 1000000)
#pragma omp task shared(F2)
#pragma omp parallel num_threads(64)
#pragma omp parallel private(i)
#pragma omp parallel for reduction(min:min) reduction(max:max)
#pragma omp single
#pragma omp parallel reduction(+:acc)
#pragma omp task shared(result, mappingFunction)
#pragma omp parallel for reduction(min: minNumber) if(size > omp_get_max_threads()
#pragma omp for
#pragma omp parallel num_threads(2)
#pragma omp parallel reduction(+:num_threads)
#pragma omp task shared(results, result) final(limit - 1<=THRESHOLD || i == to_traverse_next_size - 1)
#pragma omp parallel for reduction(max:max) reduction(min:min)
#pragma omp cancellation point parallel
#pragma omp parallel num_threads(8)
#pragma omp parallel for schedule(dynamic) reduction(merge : result)
#pragma omp task shared(result)
#pragma omp parallel for num_threads(2)
#pragma omp task shared(subtask_fib)
#pragma omp for private(i)
#pragma omp taskwait
#pragma omp parallel for num_threads(20)
#pragma omp section
#pragma omp task shared(x)
#pragma omp parallel for schedule(guided)
#pragma omp declare reduction(name:type:expression)
#pragma omp critical
#pragma omp parallel num_threads(4)
#pragma omp parallel for reduction(merge : result)
#pragma omp declare reduction(merge : element_t : merge_elements)
#pragma omp parallel for schedule(dynamic,10) reduction(union_sv : result)
#pragma omp task shared(SUM)
#pragma omp barrier
#pragma omp cancel parallel
#pragma omp parallel num_threads(20)
#pragma omp task shared(sum)
#pragma omp task shared(y)
#pragma omp task shared(F1)
#pragma omp parallel for schedule(dynamic,16)
#pragma omp parallel for
#pragma omp atomic
#pragma omp parallel for num_threads(numThreads)
#pragma omp parallel for if(is_concurrent<LLType>::value)
#pragma omp declare reduction(union_sv : sparse_vector : merge_them(omp_out, omp_in)) initializer(omp_priv=sparse_vector())
#pragma omp for lastprivate(i)
#pragma omp parallel private(nthreads, tid)
#pragma omp parallel for schedule(dynamic) reduction(+:acc)
#pragma omp cancel for
#pragma omp cancelation point for
#pragma omp parallel
#pragma omp sections
#pragma omp parallel for reduction(+:acc)
#pragma omp parallel for schedule(static) reduction(+:acc)
#pragma omp parallel for schedule(static)
#pragma omp parallel num_threads(2) if(is_concurrent<LLType>::value)
#pragma omp parallel for reduction(+: value)
#pragma omp cancellation point for
#pragma omp parallel for schedule(dynamic)
#pragma omp parallel for schedule(dynamic) shared(ret, q, c)
#pragma omp parallel num_threads(NUM_THREADS) shared(goal)
#pragma omp parallel for shared(visited)
#pragma omp parallel num_threads(used_threads) private(open_list, closed_list) shared(result)
#pragma omp for nowait
#pragma omp parallel firstprivate(counter)
#pragma omp parallel private(open_list, closed_list, depth) shared(result)
#pragma omp task shared(rets) shared(nextdepth)
#pragma omp parallel for schedule(dynamic) shared(ret, q, c)
#pragma omp parallel shared(root)